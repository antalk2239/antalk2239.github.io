<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速搭建hexo博客心得</title>
      <link href="/archives/6fa2e9dc.html"/>
      <url>/archives/6fa2e9dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="零成本搭建一个hexo博客"><a href="#零成本搭建一个hexo博客" class="headerlink" title="零成本搭建一个hexo博客"></a>零成本搭建一个hexo博客</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li>一个域名（最好有 最好备案）</li><li>一台电脑并且联网</li><li>一个github账号</li><li>一个腾讯云账号</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="安装hexo及node-js、git"><a href="#安装hexo及node-js、git" class="headerlink" title="安装hexo及node.js、git"></a>安装hexo及node.js、git</h3><h4 id="前置安装"><a href="#前置安装" class="headerlink" title="前置安装"></a>前置安装</h4><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>自行查询官网文档 一直下一步即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">v16.15.0</span><br><span class="line"></span><br><span class="line">git version</span><br><span class="line">git version 2.31.1.windows.1</span><br></pre></td></tr></table></figure><p>能查出版本号就是安装成功</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>node安装完后即可使用npm安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p><code>_config.yml</code>中编辑你网站参数</p><p><code>scaffolds</code>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><p>至此 你就可以用 <code>hexo n yourfilename</code>去创建一篇新的文章了</p><p>hexo使用<code>markdown</code>语法进行编写</p><h3 id="使用github-page搭建博客（可能对国内用户直接访问不太友好）"><a href="#使用github-page搭建博客（可能对国内用户直接访问不太友好）" class="headerlink" title="使用github page搭建博客（可能对国内用户直接访问不太友好）"></a>使用github page搭建博客（可能对国内用户直接访问不太友好）</h3><p>设置git参数 <code>your name</code>为github用户名 <code>email</code>为登录邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>新建一个repository</p><p><img src="https://i.imgur.com/sL0QkDg.png" alt="image-20220527003042944"></p><p><strong>项目名一定是 你的昵称.github.io</strong></p><p>在<code>_config.yml</code>中设置你的git地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">&#x27;your git&#x27;</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>注意空格 缩进表示层级关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成网页</span></span><br><span class="line">hexo d <span class="comment"># 发布到deploy配置的地址</span></span><br><span class="line">hexo s <span class="comment"># 创建本地网站服务</span></span><br></pre></td></tr></table></figure><p><strong>正常发布和生成本地网站前都要清除缓存和生成网页</strong></p><p>找到设置</p><p><img src="https://i.imgur.com/RElF8fm.png" alt="image-20220527003823602"></p><p>找到pages选项</p><p><img src="C:/Users/64817/AppData/Roaming/Typora/typora-user-images/image-20220527004149319.png" alt="image-20220527004149319"></p><p>选择<code>master</code>分支</p><p>可以在<code>Custom domain</code>绑定你的域名</p><p>在域名中用<code>CNAME</code>解析到 你的昵称.github.io即可访问</p><p><strong>注意</strong></p><p>如果你本地的<code>source</code>文件中没有<code>CNAME</code>那么当你用<code>hexo d</code>推送的时候回删除github中的<code>CNAME</code>文件</p><p><strong>解决办法</strong></p><ul><li>在本地新<code>source</code>建一个CNAME文件 用记事本编辑 里面填上你的域名即可</li><li>下载github中的<code>CNAME</code>文件到本地的<code>source</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客, hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中数据库的基本操作</title>
      <link href="/archives/7f8d1d03.html"/>
      <url>/archives/7f8d1d03.html</url>
      
        <content type="html"><![CDATA[<h1 id="python中数据库的基本操作"><a href="#python中数据库的基本操作" class="headerlink" title="python中数据库的基本操作"></a>python中数据库的基本操作</h1><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><ol><li><code>connect</code>函数连接到数据库</li><li><code>cursor</code>相当于输入指令的窗口</li><li><code>execute</code>相当于执行语句</li><li><code>commit</code>相当于保存（增加删减修改必须使用）</li><li><code>fetch</code>用于获取返回数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;enmm.top&#x27;</span>, user=<span class="string">&#x27;python&#x27;</span>,database=<span class="string">&#x27;python&#x27;</span>,password=<span class="string">&#x27;cafx648174702&#x27;</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># # ==============================================================================</span></span><br><span class="line"><span class="comment"># # 插入数据库</span></span><br><span class="line"><span class="comment"># sql =&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># insert into test(id,name,age) values (null,%s,%s)</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># name = &#x27;awab&#x27;</span></span><br><span class="line"><span class="comment"># age = 21</span></span><br><span class="line"><span class="comment"># # =============================================================================</span></span><br><span class="line"><span class="comment"># # 查找数据</span></span><br><span class="line"><span class="comment"># sql = &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># select * from test</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># # 执行mysql语句</span></span><br><span class="line"><span class="comment"># cursor.execute(sql)</span></span><br><span class="line"><span class="comment"># # result = cursor.fetchone()</span></span><br><span class="line"><span class="comment"># result = cursor.fetchmany(2)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="comment"># # 提交数据 增加 删除 修改 需要commit</span></span><br><span class="line"><span class="comment"># conn.commit()</span></span><br><span class="line"><span class="comment"># # ============================================================================</span></span><br><span class="line"><span class="comment"># # 删除数据</span></span><br><span class="line"><span class="comment"># sql = &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># delete from test where id=1</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># # ===========================================================================</span></span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">update test set name=&#x27;uuu&#x27; where id=2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h2><ol><li>创建连接对象</li><li>获取数据库</li><li>获取集合</li><li>进行操作：<ul><li><code>insert_one()</code>：插入一条数据</li><li><code>insert_many()</code>：插入多条数据使用列表字典嵌套</li><li><code>find()</code>：查找数据<strong>返回迭代器</strong></li><li><code>find_one()</code>查找一条数据</li><li><code>update_one()</code>更新一条数据</li><li><code>update_many()</code>更新多条数据<code>&#123;条件&#125;,&#123;&quot;$set&quot;:&#123;替换类容&#125;&#125;</code></li><li><code>delete_one()</code>删除一条满足条件的文档</li><li><code>delete_many()</code>删除多条满足条件的文档</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment"># 获取连接对象</span></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">27017</span>)</span><br><span class="line"><span class="comment"># 获取数据库</span></span><br><span class="line">db = client.zhihu</span><br><span class="line"><span class="comment"># 获取集合</span></span><br><span class="line">collection = db.qa</span><br><span class="line"><span class="comment"># # 插入数据</span></span><br><span class="line"><span class="comment"># collection.insert_many([&#123;&#x27;name&#x27;:&#x27;abs&#x27;,&#x27;age&#x27;:18&#125;,&#123;&#x27;name&#x27;:&#x27;abaas&#x27;,&#x27;age&#x27;:28&#125;,&#123;&#x27;name&#x27;:&#x27;abddds&#x27;,&#x27;age&#x27;:12&#125;])</span></span><br><span class="line"><span class="comment"># # find方法</span></span><br><span class="line"><span class="comment"># result = collection.find(&#123;&#x27;name&#x27;:&#x27;abaas&#x27;,&#x27;age&#x27;:28&#125;)</span></span><br><span class="line"><span class="comment"># for x in result:</span></span><br><span class="line"><span class="comment">#     print(x)</span></span><br><span class="line"><span class="comment"># # 更新数据</span></span><br><span class="line"><span class="comment"># collection.update_one(&#123;&#x27;name&#x27;:&#x27;abaas&#x27;&#125;,&#123;&quot;$set&quot;:&#123;&#x27;age&#x27;:17&#125;&#125;)</span></span><br><span class="line"><span class="comment"># collection.update_many(&#123;&#x27;name&#x27;:&#x27;abaas&#x27;&#125;,&#123;&quot;$set&quot;:&#123;&#x27;age&#x27;:17&#125;&#125;)</span></span><br><span class="line"><span class="comment"># # 删除数据</span></span><br><span class="line"><span class="comment"># collection.delete_one(&#123;&#x27;age&#x27;:17&#125;)</span></span><br><span class="line"><span class="comment"># collection.delete_many(&#123;&#x27;age&#x27;:17&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautifulsoup 实战电影天堂</title>
      <link href="/archives/b7fd3a30.html"/>
      <url>/archives/b7fd3a30.html</url>
      
        <content type="html"><![CDATA[<h1 id="Beautifulsoup-实战电影天堂"><a href="#Beautifulsoup-实战电影天堂" class="headerlink" title="Beautifulsoup 实战电影天堂"></a><em>Beautifulsoup</em> 实战电影天堂</h1><ul><li>get_text：得到某个标签下的非标签字符串</li><li>string：同上</li><li>strings：所有子孙标签的字符串，以迭代器返回</li><li>stripped_strings：所有子孙标签的字符串，省去空白，以迭代器返回</li><li>re.compile()可以用来模糊搜索</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>​    昨天解决了编码错误的问题，今天写起来就快了许多，这个stripped_strings确实非常好用，但是他不是列表类型，是一个迭代器，所以不能用下标表示，但我们可以直接用强制类型转换list()将其转换成一个列表类型，这样在需要用下标的时候就会方便许多。比如我们下方的代码中，需要再一个for循环中遍历另一个for循环时就需要用到下标操作，取到一个特定起始的切片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">HEADER = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">FIRST_URL = <span class="string">&quot;https://www.dytt8.net&quot;</span></span><br><span class="line">LIST_URL = <span class="string">&quot;https://www.dytt8.net/html/gndy/dyzz/list_23_&#123;&#125;.html&quot;</span></span><br><span class="line">test_url = <span class="string">&quot;https://www.dytt8.net/html/gndy/dyzz/20200226/59748.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个list页面的url</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ls_urls</span>(<span class="params">f, l</span>):</span><br><span class="line">    ls_urls = [LIST_URL.<span class="built_in">format</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(f,l+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> ls_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个页面的url</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_item_urls</span>(<span class="params">url</span>):</span><br><span class="line">    urls = []</span><br><span class="line">    resp = requests.get(url, headers=HEADER)</span><br><span class="line">    html = resp.content.decode(<span class="string">&#x27;gbk&#x27;</span>, <span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    alists = soup.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;ulink&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> alist <span class="keyword">in</span> alists:</span><br><span class="line">        item_url = FIRST_URL+alist[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        urls.append(item_url)</span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个url详情页的类容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_items</span>(<span class="params">url</span>):</span><br><span class="line">    resp = requests.get(url, headers=HEADER)</span><br><span class="line">    html = resp.content.decode(<span class="string">&#x27;gbk&#x27;</span>, <span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    title = soup.find(<span class="string">&#x27;font&#x27;</span>,color=<span class="string">&quot;#07519a&quot;</span>)</span><br><span class="line">    name = title.string</span><br><span class="line">    zoom = soup.select(<span class="string">&#x27;div#Zoom&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># print(len(zoom))</span></span><br><span class="line">    items = <span class="built_in">list</span>(zoom.stripped_strings)</span><br><span class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">        <span class="keyword">if</span> item.startswith(<span class="string">&#x27;◎年　　代&#x27;</span>):</span><br><span class="line">            year = item.replace(<span class="string">&#x27;◎年　　代&#x27;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        <span class="keyword">elif</span> item.startswith(<span class="string">&#x27;◎产　　地&#x27;</span>):</span><br><span class="line">            contury = item.replace(<span class="string">&#x27;◎产　　地&#x27;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        <span class="keyword">elif</span> item.startswith(<span class="string">&#x27;◎豆瓣评分&#x27;</span>):</span><br><span class="line">            db_rate = item.replace(<span class="string">&#x27;◎豆瓣评分&#x27;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">        <span class="keyword">elif</span> item.startswith(<span class="string">&#x27;◎主　　演&#x27;</span>):</span><br><span class="line">            actors = []</span><br><span class="line">            one = item.replace(<span class="string">&#x27;◎主　　演&#x27;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">            actors.append(one)</span><br><span class="line">            <span class="keyword">for</span> actor <span class="keyword">in</span> items[index:]:</span><br><span class="line">                <span class="keyword">if</span> actor.startswith(<span class="string">&#x27;◎标　　签&#x27;</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    actors.append(actor.strip())</span><br><span class="line">        <span class="keyword">elif</span> item.startswith(<span class="string">&#x27;【下载地址】&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cili = zoom.find_all(<span class="string">&#x27;a&#x27;</span>, href=re.<span class="built_in">compile</span>(<span class="string">&#x27;magnet&#x27;</span>))[<span class="number">0</span>][<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    movie = &#123;&#125;</span><br><span class="line">    <span class="comment"># 防止某个value不存在这里用多对try和except来跳过</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        movie[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">    <span class="keyword">except</span> UnboundLocalError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        movie[<span class="string">&#x27;year&#x27;</span>] = year</span><br><span class="line">    <span class="keyword">except</span> UnboundLocalError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        movie[<span class="string">&#x27;contury&#x27;</span>] = contury</span><br><span class="line">    <span class="keyword">except</span> UnboundLocalError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        movie[<span class="string">&#x27;db_rate&#x27;</span>] = db_rate</span><br><span class="line">    <span class="keyword">except</span> UnboundLocalError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        movie[<span class="string">&#x27;actors&#x27;</span>] = actors</span><br><span class="line">    <span class="keyword">except</span> UnboundLocalError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        movie[<span class="string">&#x27;download&#x27;</span>] = cili</span><br><span class="line">    <span class="keyword">except</span> UnboundLocalError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> movie</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬虫程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider</span>(<span class="params">a, b</span>):</span><br><span class="line">    ls_urls = get_ls_urls(a, b + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> ls_url <span class="keyword">in</span> ls_urls:</span><br><span class="line">        item_urls = get_item_urls(ls_url)</span><br><span class="line">        <span class="keyword">for</span> item_url <span class="keyword">in</span> item_urls:</span><br><span class="line">            movie = all_items(item_url)</span><br><span class="line">            <span class="built_in">print</span>(movie)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    今天写代码写的舒服，后面开始学习正则。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Beautifulsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用selenium对拉钩网进行爬取</title>
      <link href="/archives/777c3530.html"/>
      <url>/archives/777c3530.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用selenium对拉钩网进行爬取"><a href="#使用selenium对拉钩网进行爬取" class="headerlink" title="使用selenium对拉钩网进行爬取"></a>使用selenium对拉钩网进行爬取</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>安装chrome</li><li>安装<a href="http://chromedriver.storage.googleapis.com/index.html">chrome driver</a>（选择与chrome对应的版本）</li><li><code>pip install selenium</code>安装selenium</li><li><code>pip install lxml</code>安装lxml</li><li><code>pip install re</code>安装re</li></ul><h2 id="爬取思路"><a href="#爬取思路" class="headerlink" title="爬取思路"></a>爬取思路</h2><p>​    拉钩网的反爬虫机制很恶心，要想顺利的爬取数据要做到一下几点：</p><ol><li>控制爬虫的速度，速度过快会弹出登陆界面</li><li>在第一次访问时会有一个悬浮在整个页面上的一个广告，后面就没有了</li><li>他的数据的用js加载的，整个网页并没有刷新</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">drvie_path = <span class="string">&#x27;D:\chromedriver\chromedriver.exe&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput=&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LaGo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,driverpath,url</span>):</span><br><span class="line">        self.driverpath = driverpath</span><br><span class="line">        self.url = url</span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=self.driverpath)</span><br><span class="line">        self.header = [<span class="string">&#x27;command&#x27;</span>,<span class="string">&#x27;job_detail&#x27;</span>]</span><br><span class="line">        self.f = <span class="built_in">open</span>(<span class="string">&#x27;re.csv&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        self.writer = csv.DictWriter(self.f, self.header)</span><br><span class="line">        self.write = self.writer.writeheader()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断下一页的按钮是否可以被点击，如果可以，则点击下一页</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_page</span>(<span class="params">self</span>):</span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>).until(EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//span[@action=&#x27;next&#x27;]&quot;</span>)))</span><br><span class="line">        next_p = self.driver.find_element_by_xpath(<span class="string">&quot;//span[@action=&#x27;next&#x27;]&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;dis&#x27;</span> <span class="keyword">in</span> next_p.get_attribute(<span class="string">&#x27;class&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            next_p.click()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析详情页面的数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_items</span>(<span class="params">self</span>):</span><br><span class="line">        html = etree.HTML(self.driver.page_source)</span><br><span class="line">        commands = html.xpath(<span class="string">&quot;//h3/span/text()&quot;</span>)</span><br><span class="line">        command = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: re.sub(<span class="string">r&#x27;\s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, _), commands[<span class="number">0</span>:-<span class="number">1</span>]))</span><br><span class="line">        job_details = html.xpath(<span class="string">&quot;//div[@class=&#x27;job-detail&#x27;]//text()&quot;</span>)</span><br><span class="line">        job_detail = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: re.sub(<span class="string">r&#x27;\s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, _), job_details))</span><br><span class="line">        items = &#123;<span class="string">&#x27;command&#x27;</span>: command, <span class="string">&#x27;job_detail&#x27;</span>: job_detail&#125;</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(url)</span><br><span class="line">        btn = self.driver.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;body-btn&#x27;]&quot;</span>)</span><br><span class="line">        btn.click()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            items = []</span><br><span class="line">            pythons = self.driver.find_elements_by_xpath(<span class="string">&quot;//div[@class=&#x27;position&#x27;]//h3&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> python <span class="keyword">in</span> pythons:</span><br><span class="line">                <span class="comment"># time.sleep(2)</span></span><br><span class="line">                python.click()</span><br><span class="line">                WebDriverWait(self.driver,<span class="number">10</span>).until(EC.number_of_windows_to_be(<span class="number">2</span>))</span><br><span class="line">                self.driver.switch_to.window(self.driver.window_handles[<span class="number">1</span>])</span><br><span class="line">                item = self.parse_items()</span><br><span class="line">                items.append(item)</span><br><span class="line">                self.driver.close()</span><br><span class="line">                self.driver.switch_to.window(self.driver.window_handles[<span class="number">0</span>])</span><br><span class="line">            self.writer.writerows(items)</span><br><span class="line">            flag = self.next_page()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            WebDriverWait(self.driver, <span class="number">10</span>).until(EC.staleness_of(self.driver.find_element_by_xpath(<span class="string">&quot;//div[@class=&#x27;position&#x27;]//h3&quot;</span>)))</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    lago = LaGo(drvie_path, url)</span><br><span class="line">    lago.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python关于Json和csv格式的数据处理</title>
      <link href="/archives/4d41c51a.html"/>
      <url>/archives/4d41c51a.html</url>
      
        <content type="html"><![CDATA[<h1 id="python关于Json和csv格式的数据处理"><a href="#python关于Json和csv格式的数据处理" class="headerlink" title="python关于Json和csv格式的数据处理"></a>python关于Json和csv格式的数据处理</h1><ul><li><h2 id="Json的处理方法"><a href="#Json的处理方法" class="headerlink" title="Json的处理方法"></a>Json的处理方法</h2></li></ul><p><code>dumps</code>用于将列表字典嵌套保存为Json格式的字符串。</p><p><code>dump</code>用于将列表字典嵌套保存为Json文件。</p><p><code>loads</code>用于读取Json字符串转换为列表字典嵌套。</p><p><code>load</code>用于读取Json文件并且转换为列表字典嵌套。</p><p><code>ensure_ascii=False</code>防止无法显示中文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入Json模块</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">book = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;说一&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>:<span class="string">&#x27;16M&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;爸爸去哪了&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>:<span class="string">&#x27;123m&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">result = json.dumps(book,ensure_ascii=<span class="literal">False</span>, )</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;book.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">result = json.dump(book,f,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><h2 id="csv的处理方法"><a href="#csv的处理方法" class="headerlink" title="csv的处理方法"></a>csv的处理方法</h2></li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p><code>reader</code>返回一个迭代器（有表头），一行一个列表配合<code>next</code>使用</p><p><code>dictreader</code>返回有序的字典</p><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p><code>csv.writer()</code>创建一个writer</p><p>使用<code>writerow()</code>或者<code>writerows()</code>进行写入</p><p><code>csv.dictwriter(*fp,header</code>)创建以恶搞dictwriter</p><p><code>writeheader()</code>写入表头</p><p><code>writerows()</code>写入列表字典嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">header = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;height&#x27;</span>]</span><br><span class="line">data1 = [(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="number">160</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="number">19</span>,<span class="number">180</span>),(<span class="string">&#x27;王五&#x27;</span>,<span class="number">12</span>,<span class="number">110</span>)]</span><br><span class="line">data2 = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">160</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">19</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">180</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">110</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writerow_method</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;item.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow(header)</span><br><span class="line">    writer.writerows(data1)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dictwrite_method</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;dict.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    writer = csv.DictWriter(f,header)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(data2)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dictwrite_method()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pythons </tag>
            
            <tag> csv </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
